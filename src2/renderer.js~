
var Scene=function(){
	this.objects=[];
	this.lights=[];
	this.selected=0;
	this.cursor = new Vertex(0,0,150);
	this.SpaceView3D=SpaceView3D || {};
	/*{
		grid:true,
		xAxis:true,
		yAxis:true,
		zAxis:false,
		render:false,
		cursor:true
	};*/
	this.addObject=function(a){
		this.objects.push(a);
	};
	this.removeObject=function(b){
		return this.objects.splice(b,1);
	};
	this.addLight=function(a){
		this.lights.push(a);
	};
	this.removeLight=function(b){
		return this.lights.splice(b,1);
	};
	this.select=function(b){
		this.selected=b;
		this.objects[b].seleced=true;
	};
	this.deselect=function(b){
		this.objects[b].selected=false;
	};
	this.getSelected=function(){
		return this.objects[this.selected];
	};
};
var Camera=function(pos,rot){
	this.position	= new Vector(0,0,500);
	this.rotation	= new Vector(0,0,0);
	this.scale		= new Vector(1,1,1);
	this.lens		= 45;
	this.width		= "auto";
	this.height		= "auto";
	this.quaternion	= new Quaternion(-90,new Vector(-45,45/2,-45));
	//this.quaternion	= new Quaternion(0,new Vector(0,0,0));
};
var Rendering=function(){
	this.objects={};
	var state = true;		// intersection does one time(not implemented var)
	var f=new Vector(0,0,10),v=new Vector(1,1,1);
	function project (d,f){
		//referenser
		//http://en.wikipedia.org/wiki/3D_projection
		//http://www.devmaster.net/articles/software-rendering/part1.php
		var x, y, z;
		x=f.x+(d.x-f.x)*f.z/(f.z-d.z);
		y=f.y+(d.y-f.y)*f.z/(f.z-d.z);
		z=d.dot(f);
		return new Vector( x, y, z ); 
	}
	this.intersection=function(object,j,k) {
		function intersectFace(f1,f2,undefined){
			if(f1==undefined||f2==undefined)return false;
			//f1 => face f2 => line 
			if(!f1.normal||f1.normal==null||f1.normal==undefined)
				f1.normal=f1.calculateNormal();
			if(!f1.normal||f1.normal==null||f1.normal==undefined)return false;
			if(!f2.normal||f2.normal==null||f2.normal==undefined)
				f2.normal=f2.calculateNormal();
			if(!f2.normal||f2.normal==null||f2.normal==undefined)return false;

			function Side(p1,p2,a,b){
				cp1 = Vector.cross(Vector.sub(b,a),Vector.sub(p1,a));
				cp2 = Vector.cross(Vector.sub(b,a),Vector.sub(p2,a));
				if( cp1.dot(cp2) >= 0) return true;
				return false;
			}
			function intersectTriangle(p,a,b,c){
				if(Side(p,a,b,c) && Side(p,b,a,c) && Side(p,c,a,b))return true;
				return false;
			}

			ct2.clearRect(0,0,innerWidth,innerHeight);
			var ans=[];
			var intersects=[];
			var Nf1=f1.normal.position.clone();
			var Nf2=f2.normal.position.clone();
			var w=Nf1.cross(Nf2);
			var f=f1.position.clone().add(Vector.dot(Nf1,f1.vertices[0].position));
			var v=camera.quaternion.actOn(w.mult(0));//.add(f));//.add(f1.position));//
			var v2=camera.quaternion.actOn(Nf2.cross(Nf1).mult(200));//.add(f2.position));//
			ct2.beginPath();
			ct2.moveTo(v2.x+innerWidth/2,v2.y+innerHeight/2);
			ct2.lineTo(v.x+innerWidth/2,v.y+innerHeight/2);
			ct2.closePath();
			ct2.strokeStyle="#f0f";
			ct2.closePath();
			ct2.stroke();
			return;
			for(var i=0,k=Math.max(f1.vertices.length,f2.vertices.length);i<k;i++){
				var p0=f1.vertices[0].position.clone();
				var l0=f2.vertices[i].position.clone();
				var Vf2=f2.vertices;
				
				var pt=[Vf2[i].position,Vf2[(i+1<k?i+1:0)].position];

				//if(pt[1]===undefined)console.log(Vf2);
				var direction=Vector.sub(pt[0],pt[1]);
				direction.normalize();
				var b=direction.dot(Nf1);

				if( b ) {
					var dist=Vector.sub(p0,l0).dot(Nf1) / b;
					var point=Vector.mult(direction,dist).add(l0);
					//if(i==0)alert(point);

					var pr=project(camera.quaternion.actOn(point),f);
					ct2.beginPath();
					ct2.moveTo(0,0);
					ct2.lineTo(pr.x+innerWidth/2,pr.y+innerHeight/2);
					ct2.closePath();
					ct2.strokeStyle="#f0f";
					ct2.stroke();
					if(f1.intersectTriangle(point)&&parseInt(f1.intersectPoint(pt[0]))&&parseInt(f1.intersectPoint(pt[1])) ) {
						//point.makeReal();
						//alert("Line: "+i+" intersects");
						intersects.push(i);
						//return point;
					}
					ans.push(point.makeReal());
					//var n_val=(Vector.mult(direction,dist).add(l0).sub(p0).dot(Nf1));
					//if(n_val)
						//console.log("N_Val:",n_val);
				}
				if(intersects.length)
					return [intersects,ans];
			}
		}
		intersectFace(object.Faces[j],object.Faces[j+1]);
		return object;
		if(0&&(res=intersectFace(object.Faces[j],object.Faces[k]))&&res[1].length) {
			console.log(res[1]);
			var ans=1;
			if(object.Faces[j].vertices.length==2&&res[ans].length==1) {
				var temp=object.Faces[j].vertices[0].position;
				object.Faces[j].vertices[0].position=res[ans][0];
				object.Faces.push(
					new Face(new Vertex(temp),new Vertex(res[ans][0]))
				);
			}
			else if(res[ans].length==3){
				//var points=res[ans];
				var index=[];
				var res2=[],res1=[];
				for(var a=0;a<res[ans].length;a++){
					if(object.Faces[j].intersectPoint(res[ans][a])==0 && object.Faces[j].intersectTriangle(res[ans][a]))
						res2.push(res[ans][a]);
					else if(object.Faces[k].intersectPoint(res[ans][a])==0 && object.Faces[k].intersectTriangle(res[ans][a]))
						res1.push(res[ans][a]);
				}
				if(res1.length)
					res=res1,
					cur=object.Faces[j];
				else if(res2.length)
					res=res2,
					cur=object.Faces[k];
				//alert(res);
				if(res.length>=2){
					var temp=cur.vertices[0].position;
					var temp2=cur.vertices[1].position;
					cur.vertices[0].position=res[0];
					cur.vertices[1].position=res[1];
					object.Faces.push(
						new Face(new Vertex(temp),new Vertex(res[1]),new Vertex(temp2))
					);
				}
			}
		}
		return object;
	}
	this.projection=function(s,c){
		function projectPolygons(P, f,s,l,obj){
			if(P instanceof Array){
				var ans = [],light=[],f=f
					,rec=[];
				for (var i=0; i<P.length; i++){
					if(P[i] instanceof Array){
						ans[i] = new Face(); 
						ans[i].acitve = P[i].acitve;
						for (var j=0; j<P[i].length; j++ ){
							ans[i][j] = project(P[i][j],f);   
							ans[i][j].mult(s);
						}  
					}
					else if(P[i] instanceof Face){
						ans[i] = new Face(); 
						ans[i].acitve = P[i].acitve;
						var vn=Vector.normalize(l[0].position);
						if(P[i].normal){
							ans[i].light=P[i].normal.position.dot(vn)*l[0].intensity;
							ans[i].color=P[i].color.clone().multiply(ans[i].light).toStyle();//object.fillCol.clone().multiply(projekt[i][k].light).toStyle()
						}
						if(ThemeView3D.drawNormals == true&&P[i].normal){
							if(view3D && view3D.ii)
								ans[i].normal = project(P[i].normal.position,f);
							else ans[i].normal = P[i].normal.position;
							ans[i].normal.mult(ThemeView3D.normalLength);
						}
						if(view3D && view3D.ii)
							ans[i].position=project(P[i].position,f).mult(1);
						else
							ans[i].position=P[i].position.mult(1);
						for (var j=0; j<P[i].vertices.length; j++){
							ans[i].vertices.push(new Vertex(P[i].vertices[j].position));
							if(view3D.ii)
								ans[i].vertices[j].screen = project(P[i].vertices[j].worldPosition,f);   
							else
								ans[i].vertices[j].screen = P[i].vertices[j].worldPosition;
							ans[i].vertices[j].screen.mult(s);
						}
					}
					else if(P[i] instanceof VertexC){
						ans[i] = new VertexC(P[i]);
						ans[i].active = P[i].active||false;
						ans[i].activeSpline=P[i].activeSpline || false;
						if(ThemeView3D.drawNormals == true&&P[i].normal){
							// TODO: Draw Narmals projektion
						}
						if( view3D.ii)
							ans[i].screen = project(P[i].worldPosition,f).mult(1);
						else ans[i].screen = P[i].worldPosition;
						for(var j=0;j<P[i].handles.length;j++){
							if(view3D.ii)
								ans[i].handles[j].screen=project(P[i].handles[j].worldPosition,f);
							else
								ans[i].handles[j].screen=P[i].handles[j].worldPosition;
								ans[i].handles[j].screen.mult(s);
						}
						ans[i].screen.mult(s);
					}
				}
				ans.sort(function(a,b){
					var a1=0,b1=0,r=0;
					if(a instanceof VertexC)return 1;
					else if(b instanceof VertexC)return -1;
					for(var i=0;i<a.vertices.length;i++){
						a1+=a.vertices[i].screen.z;
					}
					for(var i=0;i<b.vertices.length;i++){
						b1+=b.vertices[i].screen.z;
					}
					r=a1-b1;
					return r;
				});
				
				/*objects[t].getElementsByTagName('polygon').sort(function(a,b){
					index++;
					return path[index-1];
				});*/
				return [ans,rec,light];
			}
			else if(P instanceof Face){
				alert(P);
			}
		}
		
		if ( s.SpaceView3D.show_cursor === true && s.SpaceView3D.cursor_location instanceof Vertex ) {
			s.SpaceView3D.cursor_location.worldPosition = c.quaternion.actOn( s.SpaceView3D.cursor_location.position );
			if( view3D.ii )
				s.SpaceView3D.cursor_location.screen = project( s.SpaceView3D.cursor_location.worldPosition, f );
			else
				s.SpaceView3D.cursor_location.screen = s.SpaceView3D.cursor_location.worldPosition;
		}

		var all=s.objects,o=all.length;
		var projekt=[];
		var COLOR=[];
		var newO=[];

		for(var i=0;i<o;i++){			//loop objects
			var object=all[i],vert=[];
			if( object.constructor instanceof Object3D){
				for(var j=0;j<object.Faces.length;j++){
					if(object.Faces[j] instanceof Face){
						vert[j]=new Face();
						vert[j].acitve=object.activeObject||false;
						vert[j].color=object.fillCol;

						object = this.intersection(object,j,k);
						for(var k=object.Faces[j].vertices.length,k2=0;k2<k;k2++){
							var v=c.quaternion.actOn(f).normalize().dot(c.quaternion.actOn(f).sub(object.Faces[j].vertices[k2].position));
							//if(parseInt(v)==0)
							//	alert(v);
							vert[j].vertices.push(new Vertex(object.Faces[j].vertices[k2].position.clone()));
							vert[j].vertices[vert[j].vertices.length-1].worldPosition=c.quaternion.actOn(vert[j].vertices[vert[j].vertices.length-1].position.add(object.position));
							vert[j].vertices[vert[j].vertices.length-1].position=c.quaternion.actOn(vert[j].vertices[vert[j].vertices.length-1].position);
							//alert(c.quaternion.actOn(f).normalize().dot(c.quaternion.actOn(f).sub(vert[j].vertices[vert[j].vertices.length-1].position)));
						}
						if(object.Faces[j].vertices.length>=3)
							vert[j].normal=vert[j].calculateNormal();
						vert[j].position=vert[j].calculatePosition();
					}
				}
			}
			else if ( object.constructor instanceof Curve3D ) {
				//object = this.intersection(object,j,k);
				for(var j=0;j<object.Faces.length;j++){
					vert[j] = new VertexC(object.Faces[j]);
					vert[j].active=object.activeObject||false;
					vert[j].activeSpline=object.Faces[j].activeSpline||false;
					vert[j].worldPosition=c.quaternion.actOn(vert[j].position);
					for(var k=0;k< vert[j].handles.length;k++)
						vert[j].handles[k].worldPosition = c.quaternion.actOn(vert[j].handles[k].position);
				}
			}
			var b=projectPolygons(vert,f,c.scale,s.lights,newO[i]);
			projekt.push(b[0]);
			COLOR.push({i:b[1],COLOR:object.fillCol});
			
			for(var j=0;j<=i;j++){		//loop 
				try{
					if(projekt[i][0].vertices[0].screen.z<projekt[j][0].vertices[0].screen.z){
							//THE PROJEKT ARRAY
						var C=projekt[i];
						projekt[i] = projekt[j];
						projekt[j]=C;
						projekt[i]=projekt[i];
							//THE COLOR
						var d=COLOR[i];
						COLOR[i] = COLOR[j];
						COLOR[j] = d;
						COLOR[i] = COLOR[i];
						COLOR[i].z=all[i].position.dot(f);
						COLOR[j].z=all[j].position.dot(f);
					}
				}
				catch(e){
					// no vertices
					if(e.name!="TypeError")
						console.log(e);
				}
			}
		}
		state = false;
		return [projekt,COLOR];
	};
	this.render=function(scene,camera,params,undefined){
		var mode=null;
		if(params!=undefined)
			mode = params.mode;
		f.z=camera.lens*10;
		function drawDots(P,k){
			var w=ThemeView3D.vertexSize;
			var length=new Vector(innerWidth/2,innerHeight/2);
			context.fillStyle=ThemeView3D.vertex;
			for(var j=0;j<P[k].vertices.length;j++)
				if((P[k].vertices[j].screen.x+length.x>=-innerWidth/2&&P[k].vertices[j].screen.x-length.x<=innerWidth/2&&
						P[k].vertices[j].screen.y+length.y>=-innerHeight/2&&P[k].vertices[j].screen.y-length.y<=innerHeight/2))
					context.fillRect(P[k].vertices[j].screen.x-w/2,P[k].vertices[j].screen.y-w/2,w , w );
		}
		function drawNormals(P,k){
			context.strokeStyle=ThemeView3D.faceNormal;
			var ofX=0,ofY=0;
			context.beginPath();
			context.moveTo(P[k].position.x,P[k].position.y);
			context.lineTo(P[k].normal.x+P[k].position.x,P[k].normal.y+P[k].position.y);
			context.closePath();
			context.stroke();
		}
		function paintPolygons(P,k){
			context.beginPath();
			var length=new Vector(innerWidth/2,innerHeight/2);
			var boundings=P[k].vertices[0].screen.x+length.x>=-innerWidth/2&&P[k].vertices[0].screen.x-length.x<=innerWidth/2&&
						P[k].vertices[0].screen.y+length.y>=-innerHeight/2&&P[k].vertices[0].screen.y-length.y<=innerHeight/2;
			if(boundings)
				context.moveTo(P[k].vertices[0].screen.x, P[k].vertices[0].screen.y);
			for(var j=0;j<P[k].vertices.length;j++){
				if((P[k].vertices[j].screen.x+length.x>=-innerWidth/2&&P[k].vertices[j].screen.x-length.x<=innerWidth/2&&
						P[k].vertices[j].screen.y+length.y>=-innerHeight/2&&P[k].vertices[j].screen.y-length.y<=innerHeight/2))
					context.lineTo(P[k].vertices[j].screen.x, P[k].vertices[j].screen.y);
			}
			context.closePath();
		}
		function drawHandle(P,k){
			context.lineWidth=2;
			context.beginPath();
			context.moveTo(
				P[k].screen.x+P[k].handles[0].screen.x,
				P[k].screen.y+P[k].handles[0].screen.y
			);
			context.lineTo(
				P[k].screen.x,
				P[k].screen.y
			);
			if( P[k].handles[0].activeSpline || P[k].activeSpline ) {
				context.stroke();
				context.strokeStyle="rgba(255,255,255,0.4)";
				context.lineWidth=1;
				context.stroke();
			}else context.stroke();
			context.closePath();
			context.beginPath();
			context.moveTo(
				P[k].screen.x,
				P[k].screen.y
			);
			context.lineTo(
				P[k].screen.x+P[k].handles[1].screen.x,
				P[k].screen.y+P[k].handles[1].screen.y
			);
			context.strokeStyle=ThemeView3D.activeSpline;
			if( P[k].handles[1].activeSpline || P[k].activeSpline ) {
				context.lineWidth=2;
				context.stroke();
				context.strokeStyle="rgba(255,255,255,0.4)";
				context.lineWidth=1;
				context.stroke();
			}else context.stroke();
			context.closePath();
			context.lineWidth=1;
		}
		function drawHandleDots( P, k){
			context.beginPath();
			context.fillRect(
				P[k].screen.x+P[k].handles[0].screen.x-ThemeView3D.vertexSize/2,
				P[k].screen.y+P[k].handles[0].screen.y-ThemeView3D.vertexSize/2,
				ThemeView3D.vertexSize,ThemeView3D.vertexSize
			);
			context.fillRect(
				P[k].screen.x+P[k].handles[1].screen.x-ThemeView3D.vertexSize/2,
				P[k].screen.y+P[k].handles[1].screen.y-ThemeView3D.vertexSize/2,
				ThemeView3D.vertexSize,ThemeView3D.vertexSize
			);
			context.closePath();
			context.stroke();
		}
		var proj=this.projection(scene,camera);
		for(var b=proj[0].length,i=0;i<b;i++){
			var p=proj[1][i].color;	//color mesh
			var P=proj[0][i],		//Faces
				L=scene.lights[0];	//lights
			if (context){
				if( P[0].vertices && P[0].vertices.length > 0 ) {
					context.lineWidth = ThemeView3D.outlineWidth;
					for (var k=0;k<P.length;k++){
						if( !P[k].vertices ) continue;
						/** ### INIT COLORS ### **/
						context.strokeStyle=ThemeView3D.wire;
						if(P[k].vertices.length>2)
							context.fillStyle=P[k].color || "#ccc",
							context.strokeStyle=P[k].color || "#ccc";
						else context.fillStyle="#000";
						/** ### END INIT COLORS END ### **/

						if( mode == null ){

							/** ### DRAW BASE LINES ### **/
							paintPolygons( P, k );
							/** ### END DRAW BASE LINES END ### **/

							/** ### APPLY SOLID FACE ### **/
							if( scene.SpaceView3D.viewport_shade == "solid" )
								context.fill();
							/** ### END APPLY SOLID FACES END ### **/

							/** ### APPLY WIRE FACE ### **/
							if( scene.SpaceView3D.viewport_shade == "wire" || ( scene.SpaceView3D.mode == "editmode" && P[k].acitve ) )
								context.strokeStyle=ThemeView3D.wire;
							context.stroke();  
							/** ### END APPLY WIRE FACE END ### **/

							/** ### DRAW DOTS ### **/
							if( ( scene.SpaceView3D.mode == "editmode" && P[k].acitve ) )
								drawDots( P, k);
							/** ### END DRAW DOTS END ### **/

							/** ### DRAW NORMALS ### **/
							if( ThemeView3D.drawNormals === true && P[k].normal )
								drawNormals( P, k );
							/** ### END DRAW NORMALS END ### **/
						}
						else if( mode == "dot-mode" ) 
							drawDots( P, k );
						else console.log( "THE MODE: "+mode+", IS NOT SUPPORTED!" );
						
					}
				}
				else if( P[0] instanceof VertexC ) {

					for(var k=1;k<P.length;k++){
						if( P[k] instanceof VertexC == false ) continue;
						context.fillStyle=ThemeView3D.vertex;
						if( P[i].acitve && scene.SpaceView3D.mode=="objectmode" )
							context.strokeStyle=ThemeView3D.activeObject;
						else 
							context.strokeStyle=ThemeView3D.wire;
						context.beginPath();
						context.moveTo(P[k-1].screen.x,P[k-1].screen.y);
						context.bezierCurveTo(
							P[k-1].screen.x+P[k-1].handles[1].screen.x,//ctrl 1
							P[k-1].screen.y+P[k-1].handles[1].screen.y,
							P[k].screen.x+P[k].handles[0].screen.x,//ctrl 2
							P[k].screen.y+P[k].handles[0].screen.y,
							P[k].screen.x,P[k].screen.y//end point
						);
						context.moveTo(P[k-1].screen.x,P[k-1].screen.y);
						context.closePath();
						context.stroke();
						if( scene.SpaceView3D.mode == "editmode" ){
							context.strokeStyle=ThemeView3D.activeSpline;
							//context.beginPath();
							if(P[k-1] instanceof VertexC != false&&k==1&&P[k-1].active){

								drawHandle( P, k-1 );
								// dots
								drawHandleDots( P, k-1 );
							}
							if(P[k].active) {
								drawHandle( P, k );
								// dots
								drawHandleDots( P, k );
							}
						}
					}
				}
				/** ### Draw Cursor ### **/
				if( scene.SpaceView3D.show_cursor === true && scene.SpaceView3D.cursor_location instanceof Vertex ) {
					var w=25;
					if(scene.SpaceView3D.cursor.complete)
						context.drawImage( SpaceView3D.cursor,scene.SpaceView3D.cursor_location.worldPosition.x-w/2, scene.SpaceView3D.cursor_location.worldPosition.y-w/2, w, w  )
				}
				/** ### END Draw Cursor ### **/
			}
		}
	};
};